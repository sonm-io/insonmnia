// Code generated by protoc-gen-go.
// source: insonmnia.proto
// DO NOT EDIT!

/*
Package miner is a generated protocol buffer package.

It is generated from these files:
	insonmnia.proto

It has these top-level messages:
	SpawnRequest
	SpawnReply
*/
package miner

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpawnRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SpawnRequest) Reset()                    { *m = SpawnRequest{} }
func (m *SpawnRequest) String() string            { return proto.CompactTextString(m) }
func (*SpawnRequest) ProtoMessage()               {}
func (*SpawnRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SpawnRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SpawnReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *SpawnReply) Reset()                    { *m = SpawnReply{} }
func (m *SpawnReply) String() string            { return proto.CompactTextString(m) }
func (*SpawnReply) ProtoMessage()               {}
func (*SpawnReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SpawnReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SpawnRequest)(nil), "miner.SpawnRequest")
	proto.RegisterType((*SpawnReply)(nil), "miner.SpawnReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Miner service

type MinerClient interface {
	// Sends a spawn request
	Spawn(ctx context.Context, in *SpawnRequest, opts ...grpc.CallOption) (*SpawnReply, error)
}

type minerClient struct {
	cc *grpc.ClientConn
}

func NewMinerClient(cc *grpc.ClientConn) MinerClient {
	return &minerClient{cc}
}

func (c *minerClient) Spawn(ctx context.Context, in *SpawnRequest, opts ...grpc.CallOption) (*SpawnReply, error) {
	out := new(SpawnReply)
	err := grpc.Invoke(ctx, "/miner.Miner/Spawn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Miner service

type MinerServer interface {
	// Sends a spawn request
	Spawn(context.Context, *SpawnRequest) (*SpawnReply, error)
}

func RegisterMinerServer(s *grpc.Server, srv MinerServer) {
	s.RegisterService(&_Miner_serviceDesc, srv)
}

func _Miner_Spawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerServer).Spawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miner.Miner/Spawn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerServer).Spawn(ctx, req.(*SpawnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Miner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "miner.Miner",
	HandlerType: (*MinerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Spawn",
			Handler:    _Miner_Spawn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "insonmnia.proto",
}

func init() { proto.RegisterFile("insonmnia.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0xcc, 0x2b, 0xce,
	0xcf, 0xcb, 0xcd, 0xcb, 0x4c, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0xcd, 0xcc,
	0x4b, 0x2d, 0x52, 0x52, 0xe2, 0xe2, 0x09, 0x2e, 0x48, 0x2c, 0xcf, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d,
	0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x02, 0xb3, 0x95, 0xd4, 0xb8, 0xb8, 0xa0, 0x6a, 0x0a, 0x72, 0x2a, 0x85, 0x24, 0xb8, 0xd8,
	0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x61, 0x8a, 0x60, 0x5c, 0x23, 0x2b, 0x2e, 0x56, 0x5f, 0x90,
	0xa1, 0x42, 0x86, 0x5c, 0xac, 0x60, 0x0d, 0x42, 0xc2, 0x7a, 0x60, 0x5b, 0xf4, 0x90, 0xad, 0x90,
	0x12, 0x44, 0x15, 0x2c, 0xc8, 0xa9, 0x54, 0x62, 0x48, 0x62, 0x03, 0xbb, 0xca, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x3d, 0x79, 0xc9, 0x60, 0xa8, 0x00, 0x00, 0x00,
}
